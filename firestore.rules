rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to validate timestamp fields
    function isValidTimestamp(value) {
      return value is timestamp;
    }
    
    // Events collection rules
    match /events/{eventId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId) && 
                      isValidTimestamp(request.resource.data.createdAt) && 
                      isValidTimestamp(request.resource.data.updatedAt) &&
                      isValidTimestamp(request.resource.data.date) &&
                      request.resource.data.title is string &&
                      request.resource.data.description is string;
      allow update: if isOwner(resource.data.userId) && 
                      isOwner(request.resource.data.userId) && 
                      isValidTimestamp(request.resource.data.updatedAt) &&
                      request.resource.data.userId == resource.data.userId;
      allow delete: if isOwner(resource.data.userId);
    }
    
    // Event Types collection rules
    match /eventTypes/{eventTypeId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId) && 
                      isValidTimestamp(request.resource.data.createdAt) && 
                      isValidTimestamp(request.resource.data.updatedAt) &&
                      request.resource.data.name is string &&
                      request.resource.data.color is string &&
                      request.resource.data.icon is string &&
                      request.resource.data.enabled is bool;
      allow update: if isOwner(resource.data.userId) && 
                      isOwner(request.resource.data.userId) && 
                      isValidTimestamp(request.resource.data.updatedAt) &&
                      request.resource.data.userId == resource.data.userId;
      allow delete: if isOwner(resource.data.userId);
    }
    
    // User Settings collection rules
    match /userSettings/{userId} {
      allow read: if isOwner(userId);
      allow create, update: if isOwner(userId) &&
                              isValidTimestamp(request.resource.data.updatedAt);
      allow delete: if isOwner(userId);
    }
    
    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
